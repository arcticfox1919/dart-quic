// Copyright (c) 2025, dart-quic project.
// All rights reserved.

// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for dart-quic-ffi library
class QuicFFIBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  QuicFFIBindings(ffi.DynamicLibrary dynamicLibrary)
    : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  QuicFFIBindings.fromLookup(
    ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup,
  ) : _lookup = lookup;

  late final ffi.Pointer<ffi.UintPtr> ___security_cookie = _lookup<ffi.UintPtr>(
    '__security_cookie',
  );

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  /// Create QUIC task executor
  ffi.Pointer<QuicTaskExecutor> dart_quic_executor_new(int dart_port) {
    return _dart_quic_executor_new(dart_port);
  }

  late final _dart_quic_executor_newPtr =
      _lookup<
        ffi.NativeFunction<ffi.Pointer<QuicTaskExecutor> Function(DartPort)>
      >('dart_quic_executor_new');
  late final _dart_quic_executor_new = _dart_quic_executor_newPtr
      .asFunction<ffi.Pointer<QuicTaskExecutor> Function(int)>();

  /// Submit QUIC task
  int dart_quic_executor_submit_params(
    ffi.Pointer<QuicTaskExecutor> executor,
    int command_type,
    ffi.Pointer<ffi.Uint8> data_ptr,
    int data_len,
    ffi.Pointer<ffi.Uint64> params_ptr,
    int params_count,
  ) {
    return _dart_quic_executor_submit_params(
      executor,
      command_type,
      data_ptr,
      data_len,
      params_ptr,
      params_count,
    );
  }

  late final _dart_quic_executor_submit_paramsPtr =
      _lookup<
        ffi.NativeFunction<
          TaskId Function(
            ffi.Pointer<QuicTaskExecutor>,
            ffi.Uint8,
            ffi.Pointer<ffi.Uint8>,
            ffi.UintPtr,
            ffi.Pointer<ffi.Uint64>,
            ffi.UintPtr,
          )
        >
      >('dart_quic_executor_submit_params');
  late final _dart_quic_executor_submit_params =
      _dart_quic_executor_submit_paramsPtr
          .asFunction<
            int Function(
              ffi.Pointer<QuicTaskExecutor>,
              int,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint64>,
              int,
            )
          >();

  /// Check QUIC executor running status
  bool dart_quic_executor_is_running(ffi.Pointer<QuicTaskExecutor> executor) {
    return _dart_quic_executor_is_running(executor);
  }

  late final _dart_quic_executor_is_runningPtr =
      _lookup<
        ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<QuicTaskExecutor>)>
      >('dart_quic_executor_is_running');
  late final _dart_quic_executor_is_running = _dart_quic_executor_is_runningPtr
      .asFunction<bool Function(ffi.Pointer<QuicTaskExecutor>)>();

  /// Release QUIC executor - returns immediately, closes asynchronously
  ///
  /// Recommended for main thread calls
  void dart_quic_executor_free(ffi.Pointer<QuicTaskExecutor> executor) {
    return _dart_quic_executor_free(executor);
  }

  late final _dart_quic_executor_freePtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<QuicTaskExecutor>)>
      >('dart_quic_executor_free');
  late final _dart_quic_executor_free = _dart_quic_executor_freePtr
      .asFunction<void Function(ffi.Pointer<QuicTaskExecutor>)>();

  /// Release QUIC executor - synchronous version (will block)
  ///
  /// This function will:
  /// 1. Gracefully shutdown worker thread (5 second timeout)
  /// 2. Release all related memory
  /// 3. Wait for tasks in progress to complete
  ///
  /// Warning: This function may block for up to 5 seconds, use with caution on main thread
  void dart_quic_executor_free_sync(ffi.Pointer<QuicTaskExecutor> executor) {
    return _dart_quic_executor_free_sync(executor);
  }

  late final _dart_quic_executor_free_syncPtr =
      _lookup<
        ffi.NativeFunction<ffi.Void Function(ffi.Pointer<QuicTaskExecutor>)>
      >('dart_quic_executor_free_sync');
  late final _dart_quic_executor_free_sync = _dart_quic_executor_free_syncPtr
      .asFunction<void Function(ffi.Pointer<QuicTaskExecutor>)>();

  /// Allocate native memory
  ffi.Pointer<ffi.Uint8> dart_allocate_memory(int size) {
    return _dart_allocate_memory(size);
  }

  late final _dart_allocate_memoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.UintPtr)>>(
        'dart_allocate_memory',
      );
  late final _dart_allocate_memory = _dart_allocate_memoryPtr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  /// Release native allocated memory - requires providing original allocation size
  void dart_free_memory(ffi.Pointer<ffi.Uint8> ptr, int size) {
    return _dart_free_memory(ptr, size);
  }

  late final _dart_free_memoryPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint8>, ffi.UintPtr)
        >
      >('dart_free_memory');
  late final _dart_free_memory = _dart_free_memoryPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint8>, int)>();

  /// Get memory manager statistics
  ffi.Pointer<MemoryStats> dart_get_memory_stats() {
    return _dart_get_memory_stats();
  }

  late final _dart_get_memory_statsPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MemoryStats> Function()>>(
        'dart_get_memory_stats',
      );
  late final _dart_get_memory_stats = _dart_get_memory_statsPtr
      .asFunction<ffi.Pointer<MemoryStats> Function()>();

  /// Release memory statistics structure
  void dart_free_memory_stats(ffi.Pointer<MemoryStats> stats) {
    return _dart_free_memory_stats(stats);
  }

  late final _dart_free_memory_statsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MemoryStats>)>>(
        'dart_free_memory_stats',
      );
  late final _dart_free_memory_stats = _dart_free_memory_statsPtr
      .asFunction<void Function(ffi.Pointer<MemoryStats>)>();

  /// Initialize global memory manager (default configuration)
  bool dart_initialize_memory_manager() {
    return _dart_initialize_memory_manager();
  }

  late final _dart_initialize_memory_managerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
        'dart_initialize_memory_manager',
      );
  late final _dart_initialize_memory_manager =
      _dart_initialize_memory_managerPtr.asFunction<bool Function()>();

  /// Initialize global memory manager with custom configuration
  /// Parameter -1 means use default value, otherwise use specified value
  bool dart_initialize_memory_manager_with_config(
    int tiny_pool_size,
    int small_pool_size,
    int medium_pool_size,
    int large_pool_size,
    int huge_pool_size,
    int xlarge_pool_size,
  ) {
    return _dart_initialize_memory_manager_with_config(
      tiny_pool_size,
      small_pool_size,
      medium_pool_size,
      large_pool_size,
      huge_pool_size,
      xlarge_pool_size,
    );
  }

  late final _dart_initialize_memory_manager_with_configPtr =
      _lookup<
        ffi.NativeFunction<
          ffi.Bool Function(
            ffi.Int32,
            ffi.Int32,
            ffi.Int32,
            ffi.Int32,
            ffi.Int32,
            ffi.Int32,
          )
        >
      >('dart_initialize_memory_manager_with_config');
  late final _dart_initialize_memory_manager_with_config =
      _dart_initialize_memory_manager_with_configPtr
          .asFunction<bool Function(int, int, int, int, int, int)>();

  /// Destroy global memory manager
  bool dart_destroy_memory_manager() {
    return _dart_destroy_memory_manager();
  }

  late final _dart_destroy_memory_managerPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
        'dart_destroy_memory_manager',
      );
  late final _dart_destroy_memory_manager = _dart_destroy_memory_managerPtr
      .asFunction<bool Function()>();

  /// Check if memory manager is available
  bool dart_is_memory_manager_available() {
    return _dart_is_memory_manager_available();
  }

  late final _dart_is_memory_manager_availablePtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function()>>(
        'dart_is_memory_manager_available',
      );
  late final _dart_is_memory_manager_available =
      _dart_is_memory_manager_availablePtr.asFunction<bool Function()>();
}

typedef va_list = ffi.Pointer<ffi.Char>;
typedef ptrdiff_t = ffi.LongLong;
typedef Dartptrdiff_t = int;
typedef int_least8_t = ffi.SignedChar;
typedef Dartint_least8_t = int;
typedef int_least16_t = ffi.Short;
typedef Dartint_least16_t = int;
typedef int_least32_t = ffi.Int;
typedef Dartint_least32_t = int;
typedef int_least64_t = ffi.LongLong;
typedef Dartint_least64_t = int;
typedef uint_least8_t = ffi.UnsignedChar;
typedef Dartuint_least8_t = int;
typedef uint_least16_t = ffi.UnsignedShort;
typedef Dartuint_least16_t = int;
typedef uint_least32_t = ffi.UnsignedInt;
typedef Dartuint_least32_t = int;
typedef uint_least64_t = ffi.UnsignedLongLong;
typedef Dartuint_least64_t = int;
typedef int_fast8_t = ffi.SignedChar;
typedef Dartint_fast8_t = int;
typedef int_fast16_t = ffi.Int;
typedef Dartint_fast16_t = int;
typedef int_fast32_t = ffi.Int;
typedef Dartint_fast32_t = int;
typedef int_fast64_t = ffi.LongLong;
typedef Dartint_fast64_t = int;
typedef uint_fast8_t = ffi.UnsignedChar;
typedef Dartuint_fast8_t = int;
typedef uint_fast16_t = ffi.UnsignedInt;
typedef Dartuint_fast16_t = int;
typedef uint_fast32_t = ffi.UnsignedInt;
typedef Dartuint_fast32_t = int;
typedef uint_fast64_t = ffi.UnsignedLongLong;
typedef Dartuint_fast64_t = int;
typedef intmax_t = ffi.LongLong;
typedef Dartintmax_t = int;
typedef uintmax_t = ffi.UnsignedLongLong;
typedef Dartuintmax_t = int;
typedef errno_t = ffi.Int;
typedef Darterrno_t = int;
typedef wint_t = ffi.UnsignedShort;
typedef Dartwint_t = int;
typedef wctype_t = ffi.UnsignedShort;
typedef Dartwctype_t = int;
typedef __time32_t = ffi.Long;
typedef Dart__time32_t = int;
typedef __time64_t = ffi.LongLong;
typedef Dart__time64_t = int;

final class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

final class __crt_locale_data extends ffi.Opaque {}

final class __crt_multibyte_data extends ffi.Opaque {}

final class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;

final class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

typedef mbstate_t = _Mbstatet;
typedef time_t = __time64_t;
typedef rsize_t = ffi.Size;
typedef Dartrsize_t = int;
typedef _CoreCrtSecureSearchSortCompareFunctionFunction =
    ffi.Int Function(
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
    );
typedef Dart_CoreCrtSecureSearchSortCompareFunctionFunction =
    int Function(
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
      ffi.Pointer<ffi.Void>,
    );
typedef _CoreCrtSecureSearchSortCompareFunction =
    ffi.Pointer<
      ffi.NativeFunction<_CoreCrtSecureSearchSortCompareFunctionFunction>
    >;
typedef _CoreCrtNonSecureSearchSortCompareFunctionFunction =
    ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef Dart_CoreCrtNonSecureSearchSortCompareFunctionFunction =
    int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>);
typedef _CoreCrtNonSecureSearchSortCompareFunction =
    ffi.Pointer<
      ffi.NativeFunction<_CoreCrtNonSecureSearchSortCompareFunctionFunction>
    >;
typedef _onexit_tFunction = ffi.Int Function();
typedef Dart_onexit_tFunction = int Function();
typedef _onexit_t = ffi.Pointer<ffi.NativeFunction<_onexit_tFunction>>;
typedef _purecall_handlerFunction = ffi.Void Function();
typedef Dart_purecall_handlerFunction = void Function();
typedef _purecall_handler =
    ffi.Pointer<ffi.NativeFunction<_purecall_handlerFunction>>;
typedef _invalid_parameter_handlerFunction =
    ffi.Void Function(
      ffi.Pointer<ffi.WChar>,
      ffi.Pointer<ffi.WChar>,
      ffi.Pointer<ffi.WChar>,
      ffi.UnsignedInt,
      ffi.UintPtr,
    );
typedef Dart_invalid_parameter_handlerFunction =
    void Function(
      ffi.Pointer<ffi.WChar>,
      ffi.Pointer<ffi.WChar>,
      ffi.Pointer<ffi.WChar>,
      int,
      int,
    );
typedef _invalid_parameter_handler =
    ffi.Pointer<ffi.NativeFunction<_invalid_parameter_handlerFunction>>;

final class _div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

typedef div_t = _div_t;

final class _ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

typedef ldiv_t = _ldiv_t;

final class _lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef lldiv_t = _lldiv_t;

final class _LDOUBLE extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.UnsignedChar> ld;
}

final class _CRT_DOUBLE extends ffi.Struct {
  @ffi.Double()
  external double x;
}

final class _CRT_FLOAT extends ffi.Struct {
  @ffi.Float()
  external double f;
}

final class _LONGDOUBLE extends ffi.Opaque {}

final class _LDBL12 extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.UnsignedChar> ld12;
}

final class DartTaskExecutor_QuicCommandHandler extends ffi.Opaque {}

final class MemoryStats extends ffi.Opaque {}

typedef QuicTaskExecutor = DartTaskExecutor_QuicCommandHandler;

/// Dart Native Port type
typedef DartPort = ffi.Int64;
typedef DartDartPort = int;

/// Task ID type
typedef TaskId = ffi.Uint64;
typedef DartTaskId = int;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_CXX26 = 0;

const int _HAS_NODISCARD = 1;

const int __bool_true_false_are_defined = 1;

const int false$ = 0;

const int true$ = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;

const int PROTOCOL_VERSION = 1;

const int PROTOCOL_MAGIC = 3669818881;
