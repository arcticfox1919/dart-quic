/* dart-quic-ffi C bindings */
#pragma once

#ifndef DART_QUIC_FFI_H
#define DART_QUIC_FFI_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 *
 * High-efficiency binary protocol - for Rust and Dart FFI communication
 *
 * Protocol version - for backward compatibility
 */
#define PROTOCOL_VERSION 1

/**
 * Protocol magic number
 */
#define PROTOCOL_MAGIC 3669818881

/**
 * Generic Dart FFI task executor
 */
typedef struct DartTaskExecutor_QuicCommandHandler DartTaskExecutor_QuicCommandHandler;

typedef struct MemoryStats MemoryStats;

typedef struct DartTaskExecutor_QuicCommandHandler QuicTaskExecutor;

/**
 * Dart Native Port type
 */
typedef int64_t DartPort;

/**
 * Task ID type
 */
typedef uint64_t TaskId;

/**
 * Create QUIC task executor
 */
QuicTaskExecutor *dart_quic_executor_new(DartPort dart_port);

/**
 * Submit QUIC task
 */
TaskId dart_quic_executor_submit_params(QuicTaskExecutor *executor,
                                        uint8_t command_type,
                                        uint8_t *data_ptr,
                                        uintptr_t data_len,
                                        uint64_t *params_ptr,
                                        uintptr_t params_count);

/**
 * Check QUIC executor running status
 */
bool dart_quic_executor_is_running(QuicTaskExecutor *executor);

/**
 * Release QUIC executor - returns immediately, closes asynchronously
 *
 * Recommended for main thread calls
 */
void dart_quic_executor_free(QuicTaskExecutor *executor);

/**
 * Release QUIC executor - synchronous version (will block)
 *
 * This function will:
 * 1. Gracefully shutdown worker thread (5 second timeout)
 * 2. Release all related memory
 * 3. Wait for tasks in progress to complete
 *
 * Warning: This function may block for up to 5 seconds, use with caution on main thread
 */
void dart_quic_executor_free_sync(QuicTaskExecutor *executor);

/**
 * Allocate native memory
 */
uint8_t *dart_allocate_memory(uintptr_t size);

/**
 * Release native allocated memory - requires providing original allocation size
 */
void dart_free_memory(uint8_t *ptr, uintptr_t size);

/**
 * Get memory manager statistics
 */
const struct MemoryStats *dart_get_memory_stats(void);

/**
 * Release memory statistics structure
 */
void dart_free_memory_stats(struct MemoryStats *stats);

/**
 * Initialize global memory manager (default configuration)
 */
bool dart_initialize_memory_manager(void);

/**
 * Initialize global memory manager with custom configuration
 * Parameter -1 means use default value, otherwise use specified value
 */
bool dart_initialize_memory_manager_with_config(int32_t tiny_pool_size,
                                                int32_t small_pool_size,
                                                int32_t medium_pool_size,
                                                int32_t large_pool_size,
                                                int32_t huge_pool_size,
                                                int32_t xlarge_pool_size);

/**
 * Destroy global memory manager
 */
bool dart_destroy_memory_manager(void);

/**
 * Check if memory manager is available
 */
bool dart_is_memory_manager_available(void);

#endif  /* DART_QUIC_FFI_H */
